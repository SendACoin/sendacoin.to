{
  "language": "Solidity",
  "sources": {
    "contracts/SacPayments.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.7;\n\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\n\n\n/* Errors */\n\nerror Payments_AmntLessMin();\n\ncontract SacPayments {\n\n    struct TipInfo {\n        address user;\n        uint256 amount;\n    }\n\n    mapping(address => TipInfo[]) public profiles;\n    mapping(address => uint256) public totalReceived;\n    mapping(address => uint256) public totalDonated;\n\n    function tip(address payable tipAddress) public payable {\n\n        profiles[tipAddress].push(TipInfo(msg.sender, msg.value));\n\n        totalReceived[tipAddress] += msg.value;\n        totalDonated[msg.sender] += msg.value;\n\n        tipAddress.transfer(msg.value);\n\n    }\n\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}